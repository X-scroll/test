ejs 模板引擎 基于node
作用：高效渲染数据
<%%>脚本控制  针对流程语句
<%#%>注释
<%_ %>去除首位空格
<% _%>去除尾部空格
<%=%>输出


ejs render（渲染）  模板  数据（必须是对象格式）
compile(编译) 字符串 option（选填）


art-template 模板引擎

阻断logo ico文件请求
if(req.url == "/favicon.ico"){
        return
    }
即req请求的url地址为 "/favicon.ico"时阻断请求



express  node里的框架
npm install express --save
定义：基于node封装的上层服务框架
核心：中间件     路由     提供和Api

简单的路由实现
路径不区分大小写
app.get
parama   接受动态路由参数    /:id

   
query   接受get方式传输过来的值    ?username=tom&age=12

静态支援服务器

app.use()  使用中间件   插件
express.static("文件路径")
var publicpath = path.resolve(__dirname,"public")
app.use(express.static(publicpath ))


app.post
中间件
body-parser

模板引擎
ejs
art-template
express-art-template


路由


cookie  
特点：保存在浏览器本地，只要不过期就一直存在；
容易受到攻击；
大小不能超过4K；
cookie携带的信息容易被篡改
cookie加密   signed true     crypto   md5
运用cookie-parser中间件



session
express-session




mongodb
koa

sourcetree(git图形可视化工具)


git    分布式管理系统    github   仓库    gitlab  云平台
分布式管理系统      GitHub      码云(支持svn和git)
1、本地区      2、暂存区   3、服务区

git init 初始化项目  注：项目中初始时执行一次即可
git status 产看当前项目的状态
校验身份  （针对第一次用的时候会进行校验）
git config --global  user.name  "github的用户名"             
git config --global  user.email "github的邮箱"        

git add .          添加所有文件“.”代表所有文件                git  add <file> 添加单个文件
git commit -m "注释" 提交（提交到暂存区）
git remote add origin <仓库地址>  （针对第一次）
git push -u origin master(第一次提交的时候要这句)
git push  后续提交
git push --set -upstream origin 分支名称 （提交分支到远端）
（问题：会把master分支上原有的内容同时提交上去
解决方案：）


git branch   列出所有分支
git branch -r 列出所有远端分支
git branch -a 列出所有远端和本地分支
git branch 分支名称   创建分支但是停留在当前分支
git checkout 分支名字  切换分支
git checkout -b 分支名字   创建并切换分支

分支的作用：便于功能的独立开发
git clone 地址    （克隆项目，针对于第一次对项目进行开发）
git pull                (拉取，针对于远端的分支和内容）
git fetch              (拉取，针对于远端的内容）

选修：
git diff   版本之间的对比
git tag   打标签
git stash    暂存内容



SVN
集中式管理系统
1、本地区   2、服务区



vim  linx
esc      退出插入模式
：wq   推出编辑模式







